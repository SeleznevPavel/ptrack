diff --git a/src/backend/access/transam/xlog.c b/src/backend/access/transam/xlog.c
index 34a2c71812..2d73d8023e 100644
--- a/src/backend/access/transam/xlog.c
+++ b/src/backend/access/transam/xlog.c
@@ -135,6 +135,7 @@ int			wal_retrieve_retry_interval = 5000;
 int			max_slot_wal_keep_size_mb = -1;
 int			wal_decode_buffer_size = 512 * 1024;
 bool		track_wal_io_timing = false;
+backup_checkpoint_request_hook_type backup_checkpoint_request_hook = NULL;
 
 #ifdef WAL_DEBUG
 bool		XLOG_DEBUG = false;
@@ -8801,6 +8802,12 @@ do_pg_backup_start(const char *backupidstr, bool fast, List **tablespaces,
 		{
 			bool		checkpointfpw;
 
+			/*
+			 * Before we call RequestCheckpoint() we need to set
+			 * init_lsn for ptrack map
+			 */
+			if (backup_checkpoint_request_hook)
+				backup_checkpoint_request_hook();
 			/*
 			 * Force a CHECKPOINT.  Aside from being necessary to prevent torn
 			 * page problems, this guarantees that two successive backup runs
diff --git a/src/backend/backup/basebackup.c b/src/backend/backup/basebackup.c
index 9a2bf59e84..ade9115651 100644
--- a/src/backend/backup/basebackup.c
+++ b/src/backend/backup/basebackup.c
@@ -220,6 +220,13 @@ static const struct exclude_list_item excludeFiles[] =
 	{"postmaster.pid", false},
 	{"postmaster.opts", false},
 
+	/*
+	 * Skip all transient ptrack files, but do copy ptrack.map, since it may
+	 * be successfully used immediately after backup. TODO: check, test?
+	 */
+	{"ptrack.map.mmap", false},
+	{"ptrack.map.tmp", false},
+
 	/* end of list */
 	{NULL, false}
 };
diff --git a/src/backend/storage/file/copydir.c b/src/backend/storage/file/copydir.c
index d4fbe54207..b108416c70 100644
--- a/src/backend/storage/file/copydir.c
+++ b/src/backend/storage/file/copydir.c
@@ -27,6 +27,8 @@
 #include "storage/copydir.h"
 #include "storage/fd.h"
 
+copydir_hook_type copydir_hook = NULL;
+
 /*
  * copydir: copy a directory
  *
@@ -75,6 +77,9 @@ copydir(const char *fromdir, const char *todir, bool recurse)
 	}
 	FreeDir(xldir);
 
+	if (copydir_hook)
+		copydir_hook(todir);
+
 	/*
 	 * Be paranoid here and fsync all files to ensure the copy is really done.
 	 * But if fsync is disabled, we're done.
diff --git a/src/backend/storage/smgr/md.c b/src/backend/storage/smgr/md.c
index bf0f3ca76d..7d9833a360 100644
--- a/src/backend/storage/smgr/md.c
+++ b/src/backend/storage/smgr/md.c
@@ -85,6 +85,8 @@ typedef struct _MdfdVec
 
 static MemoryContext MdCxt;		/* context for all MdfdVec objects */
 
+mdextend_hook_type mdextend_hook = NULL;
+mdwrite_hook_type mdwrite_hook = NULL;
 
 /* Populate a file tag describing an md.c segment file. */
 #define INIT_MD_FILETAG(a,xx_rlocator,xx_forknum,xx_segno) \
@@ -513,6 +515,9 @@ mdextend(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
 		register_dirty_segment(reln, forknum, v);
 
 	Assert(_mdnblocks(reln, forknum, v) <= ((BlockNumber) RELSEG_SIZE));
+
+	if (mdextend_hook)
+		mdextend_hook(reln->smgr_rlocator, forknum, blocknum);
 }
 
 /*
@@ -620,6 +625,12 @@ mdzeroextend(SMgrRelation reln, ForkNumber forknum,
 
 		remblocks -= numblocks;
 		curblocknum += numblocks;
+
+		if (mdextend_hook)
+		{
+			for (; blocknum < curblocknum; blocknum++)
+				mdextend_hook(reln->smgr_rlocator, forknum, blocknum);
+		}
 	}
 }
 
@@ -1015,7 +1026,14 @@ mdwritev(SMgrRelation reln, ForkNumber forknum, BlockNumber blocknum,
 
 		nblocks -= nblocks_this_segment;
 		buffers += nblocks_this_segment;
-		blocknum += nblocks_this_segment;
+
+		if (mdwrite_hook)
+		{
+			for (; nblocks_this_segment--; blocknum++)
+				mdwrite_hook(reln->smgr_rlocator, forknum, blocknum);
+		}
+		else
+			blocknum += nblocks_this_segment;
 	}
 }
 
diff --git a/src/backend/storage/sync/sync.c b/src/backend/storage/sync/sync.c
index ab7137d0ff..bc40a763c0 100644
--- a/src/backend/storage/sync/sync.c
+++ b/src/backend/storage/sync/sync.c
@@ -74,6 +74,8 @@ static MemoryContext pendingOpsCxt; /* context for the above  */
 static CycleCtr sync_cycle_ctr = 0;
 static CycleCtr checkpoint_cycle_ctr = 0;
 
+ProcessSyncRequests_hook_type ProcessSyncRequests_hook = NULL;
+
 /* Intervals for calling AbsorbSyncRequests */
 #define FSYNCS_PER_ABSORB		10
 #define UNLINKS_PER_ABSORB		10
@@ -470,6 +472,9 @@ ProcessSyncRequests(void)
 	CheckpointStats.ckpt_longest_sync = longest;
 	CheckpointStats.ckpt_agg_sync_time = total_elapsed;
 
+	if (ProcessSyncRequests_hook)
+		ProcessSyncRequests_hook();
+
 	/* Flag successful completion of ProcessSyncRequests */
 	sync_in_progress = false;
 }
diff --git a/src/bin/pg_checksums/pg_checksums.c b/src/bin/pg_checksums/pg_checksums.c
index 9e6fd435f6..f2180b9f6d 100644
--- a/src/bin/pg_checksums/pg_checksums.c
+++ b/src/bin/pg_checksums/pg_checksums.c
@@ -110,6 +110,11 @@ static const struct exclude_list_item skip[] = {
 	{"pg_filenode.map", false},
 	{"pg_internal.init", true},
 	{"PG_VERSION", false},
+
+	{"ptrack.map.mmap", false},
+	{"ptrack.map", false},
+	{"ptrack.map.tmp", false},
+
 #ifdef EXEC_BACKEND
 	{"config_exec_params", true},
 #endif
diff --git a/src/bin/pg_resetwal/pg_resetwal.c b/src/bin/pg_resetwal/pg_resetwal.c
index e9dcb5a6d8..844b04d5e1 100644
--- a/src/bin/pg_resetwal/pg_resetwal.c
+++ b/src/bin/pg_resetwal/pg_resetwal.c
@@ -86,6 +86,7 @@ static void FindEndOfXLOG(void);
 static void KillExistingXLOG(void);
 static void KillExistingArchiveStatus(void);
 static void KillExistingWALSummaries(void);
+static void KillExistingPtrack(void);
 static void WriteEmptyXLOG(void);
 static void usage(void);
 
@@ -495,6 +496,7 @@ main(int argc, char *argv[])
 	KillExistingXLOG();
 	KillExistingArchiveStatus();
 	KillExistingWALSummaries();
+	KillExistingPtrack();
 	WriteEmptyXLOG();
 
 	printf(_("Write-ahead log reset\n"));
@@ -998,6 +1000,41 @@ KillExistingXLOG(void)
 		pg_fatal("could not close directory \"%s\": %m", XLOGDIR);
 }
 
+/*
+ * Remove existing ptrack files
+ */
+static void
+KillExistingPtrack(void)
+{
+#define PTRACKDIR "global"
+
+	DIR            *xldir;
+	struct dirent  *xlde;
+	char            path[MAXPGPATH + sizeof(PTRACKDIR)];
+
+	xldir = opendir(PTRACKDIR);
+	if (xldir == NULL)
+		pg_fatal("could not open directory \"%s\": %m", PTRACKDIR);
+
+	while (errno = 0, (xlde = readdir(xldir)) != NULL)
+	{
+		if (strcmp(xlde->d_name, "ptrack.map.mmap") == 0 ||
+			strcmp(xlde->d_name, "ptrack.map") == 0 ||
+			strcmp(xlde->d_name, "ptrack.map.tmp") == 0)
+		{
+			snprintf(path, sizeof(path), "%s/%s", PTRACKDIR, xlde->d_name);
+			if (unlink(path) < 0)
+				pg_fatal("could not delete file \"%s\": %m", path);
+		}
+	}
+
+	if (errno)
+		pg_fatal("could not read directory \"%s\": %m", PTRACKDIR);
+
+	if (closedir(xldir))
+		pg_fatal("could not close directory \"%s\": %m", PTRACKDIR);
+}
+
 
 /*
  * Remove existing archive status files
diff --git a/src/bin/pg_rewind/filemap.c b/src/bin/pg_rewind/filemap.c
index 4458324c9d..7d857467f7 100644
--- a/src/bin/pg_rewind/filemap.c
+++ b/src/bin/pg_rewind/filemap.c
@@ -156,6 +156,10 @@ static const struct exclude_list_item excludeFiles[] =
 	{"postmaster.pid", false},
 	{"postmaster.opts", false},
 
+	{"ptrack.map.mmap", false},
+	{"ptrack.map", false},
+	{"ptrack.map.tmp", false},
+
 	/* end of list */
 	{NULL, false}
 };
diff --git a/src/include/access/xlog.h b/src/include/access/xlog.h
index 76787a8267..2c662f4022 100644
--- a/src/include/access/xlog.h
+++ b/src/include/access/xlog.h
@@ -57,6 +57,9 @@ extern PGDLLIMPORT int wal_decode_buffer_size;
 
 extern PGDLLIMPORT int CheckPointSegments;
 
+typedef void (*backup_checkpoint_request_hook_type) (void);
+extern PGDLLIMPORT backup_checkpoint_request_hook_type backup_checkpoint_request_hook;
+
 /* Archive modes */
 typedef enum ArchiveMode
 {
diff --git a/src/include/storage/copydir.h b/src/include/storage/copydir.h
index a25e258f47..b20b9c76e8 100644
--- a/src/include/storage/copydir.h
+++ b/src/include/storage/copydir.h
@@ -13,6 +13,9 @@
 #ifndef COPYDIR_H
 #define COPYDIR_H
 
+typedef void (*copydir_hook_type) (const char *path);
+extern PGDLLIMPORT copydir_hook_type copydir_hook;
+
 extern void copydir(const char *fromdir, const char *todir, bool recurse);
 extern void copy_file(const char *fromfile, const char *tofile);
 
diff --git a/src/include/storage/md.h b/src/include/storage/md.h
index 620f10abde..b36936871b 100644
--- a/src/include/storage/md.h
+++ b/src/include/storage/md.h
@@ -19,6 +19,13 @@
 #include "storage/smgr.h"
 #include "storage/sync.h"
 
+typedef void (*mdextend_hook_type) (RelFileLocatorBackend smgr_rlocator,
+									ForkNumber forknum, BlockNumber blocknum);
+extern PGDLLIMPORT mdextend_hook_type mdextend_hook;
+typedef void (*mdwrite_hook_type) (RelFileLocatorBackend smgr_rlocator,
+									ForkNumber forknum, BlockNumber blocknum);
+extern PGDLLIMPORT mdwrite_hook_type mdwrite_hook;
+
 /* md storage manager functionality */
 extern void mdinit(void);
 extern void mdopen(SMgrRelation reln);
diff --git a/src/include/storage/sync.h b/src/include/storage/sync.h
index 9dee8fa6e5..348ed53e4e 100644
--- a/src/include/storage/sync.h
+++ b/src/include/storage/sync.h
@@ -55,6 +55,9 @@ typedef struct FileTag
 	uint64		segno;
 } FileTag;
 
+typedef void (*ProcessSyncRequests_hook_type) (void);
+extern PGDLLIMPORT ProcessSyncRequests_hook_type ProcessSyncRequests_hook;
+
 extern void InitSync(void);
 extern void SyncPreCheckpoint(void);
 extern void SyncPostCheckpoint(void);
